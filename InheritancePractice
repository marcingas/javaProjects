package interEx;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

public class Main {
    public static void main(String[] args) {

Bird bird = new Bird();
Animal animal = new Bird();
FlightEnabled flier = bird;
Trackable tracker = bird;

inFlight(flier);
inFlight(new Jet());
Trackable truck = new Truck();
truck.track();
double kmsTraveled = 100;
double milesTraveled = kmsTraveled * FlightEnabled.KM_TO_MILES;
        System.out.printf("Truck taveled %.2f km or %.2f miles%n", kmsTraveled, milesTraveled);

        LinkedList<FlightEnabled> fliers =new LinkedList<>();
        fliers.add(bird);
        List<FlightEnabled> betterFliers = new LinkedList<>();
        betterFliers.add(bird);

        triggerFliers(fliers);
        flyFliers(fliers);
        landFliers(fliers);
        // vs:
        triggerFliers(betterFliers);
        flyFliers(betterFliers);
        landFliers(betterFliers);






    }


//METHODS:


    public static void inFlight(FlightEnabled flier){
        flier.takeOff();
        flier.fly();
        if(flier instanceof Trackable tracker){
            tracker.track();
        }
        flier.land();
    }

    private static void triggerFliers(List<FlightEnabled> fliers){
        for (var flier : fliers){
            flier.takeOff();
        }
    }

    private static void flyFliers(List<FlightEnabled> fliers){
        for (var flier : fliers){
            flier.fly();
        }
    }
    private static void landFliers(List<FlightEnabled> fliers){
        for (var flier : fliers){
            flier.land();
        }
    }


}
//CLASES: 

package interEx;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

public class Main {
    public static void main(String[] args) {

Bird bird = new Bird();
Animal animal = new Bird();
FlightEnabled flier = bird;
Trackable tracker = bird;

inFlight(flier);
inFlight(new Jet());
Trackable truck = new Truck();
truck.track();
double kmsTraveled = 100;
double milesTraveled = kmsTraveled * FlightEnabled.KM_TO_MILES;
        System.out.printf("Truck taveled %.2f km or %.2f miles%n", kmsTraveled, milesTraveled);

        LinkedList<FlightEnabled> fliers =new LinkedList<>();
        fliers.add(bird);
        List<FlightEnabled> betterFliers = new LinkedList<>();
        betterFliers.add(bird);

        triggerFliers(fliers);
        flyFliers(fliers);
        landFliers(fliers);
        // vs:
        triggerFliers(betterFliers);
        flyFliers(betterFliers);
        landFliers(betterFliers);






    }





    public static void inFlight(FlightEnabled flier){
        flier.takeOff();
        flier.fly();
        if(flier instanceof Trackable tracker){
            tracker.track();
        }
        flier.land();
    }

    private static void triggerFliers(List<FlightEnabled> fliers){
        for (var flier : fliers){
            flier.takeOff();
        }
    }

    private static void flyFliers(List<FlightEnabled> fliers){
        for (var flier : fliers){
            flier.fly();
        }
    }
    private static void landFliers(List<FlightEnabled> fliers){
        for (var flier : fliers){
            flier.land();
        }
    }


}

package interEx;

public class Bird extends Animal implements FlightEnabled, Trackable{


    @Override
    public void move() {
        System.out.println("Flaps wings");
    }

    @Override
    public void takeOff() {
        System.out.println(getClass().getSimpleName() + " is taking off");
    }

    @Override
    public void land() {
        System.out.println(getClass().getSimpleName() + " is landing");
    }

    @Override
    public void fly() {
        System.out.println(getClass().getSimpleName() + " is flying");
    }

    @Override
    public void track() {
        System.out.println(getClass().getSimpleName() + " 's coordinates recorded ");

    }
}

//INTERFACES AND ENUMS: 
package interEx;

enum FlightStages implements Trackable{
    GROUNDED,LAUNCH, CRUISE, DATA_COLLECTION;

    @Override
    public void track() {
        if(this != GROUNDED){
            System.out.println("Monitoring " + this);
        }

    }
    public FlightStages getNextStage(){
        FlightStages [] allStages = values();
        return allStages[(ordinal() + 1)% allStages.length];
    }
}




record DragonFly(String name, String type) implements FlightEnabled {

    @Override
    public void takeOff() {

    }

    @Override
    public void land() {

    }

    @Override
    public void fly() {

    }
}

class Satellite implements OrbitEarth{


    public void achieveOrbit() {
        System.out.println("Orbit has achieved");
    }

    @Override
    public void takeOff() {

    }

    @Override
    public void land() {

    }

    @Override
    public void fly() {

    }
}

interface OrbitEarth extends FlightEnabled {
    void achieveOrbit();
}

interface FlightEnabled {
double MILES_TO_KM = 1.60934;
double KM_TO_MILES = 0.621371;

    public  abstract void takeOff();
    abstract void land();
    void fly();
    default FlightStages transition (FlightStages stage){
//        System.out.println("transition not  implemented on " + getClass().getName());
//        return null;
        FlightStages nextStage = stage.getNextStage();
        System.out.println("Transitioning from " + stage + " to " + nextStage);
    return  nextStage;
    }
}
interface Trackable {
    void track();

}

public  abstract class Animal {
    public abstract void move();

}


//ONE MORE CLASS: 

package interEx;

public class Jet implements Trackable, FlightEnabled {


    @Override
    public void takeOff() {
        System.out.println(getClass().getSimpleName() + " is taking off");
    }

    @Override
    public void land() {
        System.out.println(getClass().getSimpleName() + " is landing");
    }

    @Override
    public void fly() {
        System.out.println(getClass().getSimpleName() + " is flying");
    }

    @Override
    public void track() {
        System.out.println(getClass().getSimpleName() + " 's coordinates recorded ");

    }

    @Override
    public FlightStages transition(FlightStages stage) {
        System.out.println(getClass().getSimpleName() + " transitioning");
        return FlightEnabled.super.transition(stage);
    }
}


//TEST CLASS FOR testing  JET IMPLEMENTATION: 

package interEx;

public class Test {
    public static void main(String[] args) {

        inFlight(new Jet());

    }
    public static void inFlight(FlightEnabled flier){
        flier.takeOff();
        flier.transition(FlightStages.LAUNCH);
        flier.fly();
        if(flier instanceof Trackable tracker){
            tracker.track();
        }
        flier.land();
    }
}



