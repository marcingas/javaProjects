public class TestFly {
    public static void main(String[] args) {
        inFlight(new Jet());
       orbit(new Satellite());

    }




// dwie metody 
    private static void inFlight(FlightEnabled flier){
        flier.takeOff();
        flier.transition(FlightStages.LAUNCH);
        flier.fly();
        if(flier instanceof Trackable tracked){
            tracked.track();
        }
        flier.land();
    }
    private static void orbit(OrbitEarth flier){
        flier.takeOff();
        flier.fly();
        flier.land();
    }
}


//klasy i interface: 

public class Jet implements FlightEnabled, Trackable{
    @Override
    public void takeOff() {
        System.out.println(getClass().getSimpleName() + " is taking Off");
    }

    @Override
    public void land() {
        System.out.println(getClass().getSimpleName() + " is landing");

    }

    @Override
    public void fly() {
        System.out.println(getClass().getSimpleName() + " is flying");

    }

    @Override
    public void track() {
        System.out.println(getClass().getSimpleName() + "'s coordinates recorded");

    }

    @Override
    public FlightStages transition(FlightStages stage) {
        System.out.println(getClass().getSimpleName() + " transitioning ");
        return FlightEnabled.super.transition(stage);
    }
}

   
   
   @Override
    public void achieveOrbit() {
        transition("Orbit achieved!");
    }


    @Override
    public void takeOff() {
        transition("Taking Off");

    }

    @Override
    public void land() {
        transition("Landing");

    }

    @Override
    public void fly() {
        achieveOrbit();
        transition("Data Collection while Orbiting");

    }
    public void transition(String description){
        System.out.println(description);
        stage = transition(stage);
        stage.track();
    }
}
interface OrbitEarth extends FlightEnabled{
    void achieveOrbit();
    private static void log(String description){
        var today = new java.util.Date();
        System.out.println(today + " : " + description);
    }
    private void logStage(FlightStages stage, String description){
        description = stage + " : " + description;
        log(description);
    }

    @Override
    default FlightStages transition(FlightStages stage) {
        FlightStages nextStage = FlightEnabled.super.transition(stage);
        logStage(stage, "Beginning transition to " + nextStage);
        return  nextStage;
    }
}
interface FlightEnabled{


    double MILES_TO_KM = 1.60934;
    double KM_TO_MILES = 0.621371;
     void takeOff();
     void land();
     void fly();
    default FlightStages transition(FlightStages stage){
     FlightStages nextStage = stage.getNextStage();
        System.out.println("Transitioning from " + stage + " to " + nextStage);
        return nextStage;
    }

}
interface Trackable{
    void track();
}



public abstract class AeroMachines {
}
